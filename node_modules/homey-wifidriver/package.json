{
  "name": "homey-wifidriver",
  "version": "1.0.0",
  "description": "Library that extends [`HomeyDriver`](https://apps.developer.athom.com/Driver.html) and [`HomeyDevice`](https://apps.developer.athom.com/Device.html) to provide a set of functionality that is commonly used in Homey Apps that support devices over WiFi.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "backoff": "^2.5.0",
    "request-promise-native": "^1.0.4",
    "uuid": "^3.1.0"
  },
  "devDependencies": {
    "grunt": "^1.0.1",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-jsdoc": "^2.1.0"
  },
  "readme": "# WifiDriver\nLibrary that extends [`HomeyDriver`](https://apps.developer.athom.com/Driver.html) and [`HomeyDevice`](https://apps.developer.athom.com/Device.html) to provide a set of functionality that is commonly used in Homey Apps that support devices over WiFi. \n\n## Installation\n\n```\ncd /path/to/com.your.homeyapp/\nnpm install --save git+https://git@github.com/athombv/node-homey-wifidriver.git\ncd node_modules/homey-wifidriver\nnpm install\n```\n\n## Example\n\nFile: `/drivers/mydriver/driver.js`\n\n```javascript\nconst WifiDriver = require('homey-wifidriver').Driver;\nconst ExampleAPI = require('example-api');\n\nconst oauth2ClientConfig = {\n\turl: `https://api.example.com/authorize?response_type=code&client_id=${Homey.env.API_CLIENT_ID}&redirect_uri=https://callback.athom.com/oauth2/callback/`,\n\ttokenEndpoint: 'https://api.example.com/token',\n\tkey: Homey.env.API_CLIENT_ID,\n\tsecret: Homey.env.API_CLIENT_SECRET,\n\tallowMultipleAccounts: false,\n};\n\nclass myDriver extends WifiDriver {\n\t\n\tonInit(){\n\t\t// This will override onPair() to handle OAuth2 pairing\n\t\tsuper.onInit({oauth2ClientConfig});\n\t}\n\t\n\t/**\n\t* This method will be called if a oauth2ClientConfig is provided onInit. The data object contains\n\t* an authenticated OAuth2Account instance which will be destroyed automatically after pairing\n\t* has ended.\n        */\n\tonPairOAuth2ListDevices(data) {\n    \n            // Create temporary API client with temporary account\n            const exampleApiClient = new ExampleAPI({\n                oauth2Account: data.oauth2Account,\n            });\n    \n            // Return promise that fetches devices from account\n            return exampleApiClient.fetchDevices()\n                .then(devices => {\n                    exampleApiClient.destroy();\n                    return devices;\n                })\n        }\n}\n```\n\nFile: `/drivers/mydriver/device.js`\n\n```javascript\nconst WifiDevice = require('homey-wifidriver').Device;\n\nconst backOffStrategy = {\n    initialDelay: 10000, // 10 seconds\n    maxDelay: 1000 * 60 * 60, // 1 hour\n    maxTries: 10, // Optional, max backoff tries, if not provided it will not end until reset\n    onBackOffReady: (() => {}), // Optional, if provided this method will be called on each backoff, else it will default to this.onInit()\n    onBackOffFailed: (() => {}), // Optional, this method will be called when backoff failed; maxTries was exceeded\n}\n\nclass myDevice extends WifiDevice {\n\n\tonInit() {\n\t\tsuper.onInit({backOffStrategy});\n\n\t\t// Create API client with OAuth2Account\n\t\tthis.exampleApiClient = new ExampleAPI({\n\t\t\toauth2Account: this.getOAuth2Account(), // OAuth2Account instance that handles fetching and refreshing access tokens\n\t\t})\n\t\t.on('initialization_failed', () => {\n\t\t\tthis.nextBackoff()\n\t\t})\n\t\t.on('initialization_success', () => {\n\t\t\tthis.resetBackOff();\n\t\t});\n\n\t\t// Method that will create an interval\n\t\tthis.registerPollInterval({\n\t\t\tid: 'status',\n\t\t\tfn: this.exampleApiClient.getStatus.bind(this.exampleApiClient),\n\t\t\tinterval: 30000,\n\t\t});\n\t\t\n\t\t// To stop polling\n\t\tthis.deregisterPollInterval('status');\n\t}\n\t\n\tonDeleted() {\n\t\t// Clean up registered polling intervals\n\t\tsuper.onDeleted();\n\t}\n}\n```\n\n\n",
  "readmeFilename": "README.md",
  "gitHead": "327551a53d4ef553bfe3181510f9624e62a24622",
  "_id": "homey-wifidriver@1.0.0",
  "_shasum": "5a65fa93cd638feeea96aa2f8c3aaf36ae37eda2",
  "_from": "../../node-homey-wifidriver",
  "_resolved": "file:../../node-homey-wifidriver"
}
